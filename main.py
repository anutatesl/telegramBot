import librosa
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from colorama import Fore
from sklearn import preprocessing
import librosa.display
from moviepy.editor import *

import telebot
from telebot import types


token = '6207774750:AAGfzAiTjPTweAY0SqH3FBZGBlTpZYdjE_w'
bot = telebot.TeleBot(token)

old_video = None
old_audio = None
new_video = None

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è ")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("/menu")

    markup.add(button)

    bot.send_message(message.from_user.id, '–ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏?', reply_markup=markup)

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í—ã–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ')
    btn2 = types.KeyboardButton('–ü–æ–¥–º–µ–Ω–∞ –∞—É–¥–∏–æ')
    btn3 = types.KeyboardButton('–í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Ä—è–¥–∞')

    markup.add(btn1, btn2, btn3)

    bot.send_message(message.from_user.id, '–ß—Ç–æ –º–Ω–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    #chat_id = message.chat.id
    if message.text == '–ü–æ–¥–º–µ–Ω–∞ –∞—É–¥–∏–æ':
        msg = bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏: '
                                    '\n1. –í–∏–¥–µ–æ-—Ñ–∞–π–ª —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "*.mp4": '
                           '\n2. –ê—É–¥–∏–æ-—Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "*.mp3"'
                           '\n3. –ò–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: "3 20", –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, '
                                    '—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞—É–¥–∏–æ-—á–∞—Å—Ç—å —Å 3 –ø–æ 20 —Å–µ–∫—É–Ω–¥—É –≤ –≤–∏–¥–µ–æ'
                                    '\n\n –í–Ω–∞—á–∞–ª–µ –≤–∏–¥–µ–æüòâ')
        bot.register_next_step_handler(msg, first_step_load)

    elif message.text == '–í—ã–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ':
        msg = bot.reply_to(message, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "*.mp4": ')
        bot.register_next_step_handler(msg, load_video)

    elif message.text == '–í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Ä—è–¥–∞':
        msg = bot.reply_to(message, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "*.ogg": ')
        bot.register_next_step_handler(msg, load_audio)

    else:
        bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –í–∞—à –≤—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É')

def load_video(message):
    chat_id = message.chat.id
    try:
        file_details = message.video
        bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...')
        file_id = file_details.file_id
        file_info = bot.get_file(file_id)
        downloaded_video = bot.download_file(file_info.file_path)
        source_file_name = message.video.file_id + ".mp4"
        with open(source_file_name, 'wb') as saved_file:
            saved_file.write(downloaded_video)
        destination_file_name = 'audio.mp3'

        bot.send_message(chat_id, "–í—ã–¥–µ–ª—è—é –∞—É–¥–∏–æ... ")
        extract_audio(source_file_name, destination_file_name)
        audio = open(destination_file_name, 'rb')
        bot.send_audio(chat_id, audio)
        audio.close()
        os.remove(source_file_name)
        os.remove(destination_file_name)
    except:
        bot.send_message(chat_id, '–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return

def extract_audio(source_file_name, destination_file_name):
    mp4file, mp3file = source_file_name, destination_file_name
    video_clip = VideoFileClip(mp4file)
    audio_clip = video_clip.audio
    audio_clip.write_audiofile(mp3file)
    video_clip.close()

def load_audio(message):
    chat_id = message.chat.id
    try:
        file_details = message.audio
        bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∫–∞ audio...')
        file_id = file_details.file_id
        file_info = bot.get_file(file_id)
        downloaded_audio = bot.download_file(file_info.file_path)
        source_file_name = message.audio.file_id + ".ogg"
        with open(source_file_name, 'wb') as saved_file:
            saved_file.write(downloaded_audio)

        msg = bot.send_message(chat_id, "–í—ã–¥–µ–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... ")
        selection_inf(msg, source_file_name)
        os.remove(source_file_name)

    except:
        bot.send_message(chat_id, '–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return

def selection_inf(message, source_file_name):

    sample_rate, sr = librosa.load(source_file_name)
    bot.send_message(message.chat.id,
                     "–ö–æ–ª-–≤–æ —Å—ç–º–ø–ª–æ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É –∏ —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: " + str(sample_rate.shape) + " " + str(sr))

    tempo, beat = librosa.beat.beat_track(y=sample_rate, sr=sr)
    bot.send_message(message.chat.id, "–¢–µ–º–ø(—Å–∫–æ—Ä–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è)–±–∏—Ç/–º–∏–Ω: " + str(tempo))
    bot.send_message(message.chat.id, "–ë–∏—Ç(–æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∏—Ç–º, –≤—ã—Å—Ç—É–∫–∏–≤–∞–µ–º—ã–π –≤ –ø–µ—Å–Ω–µ): " + str(beat))

    #–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏—Ö (—Ç–æ–Ω–∞–ª—å–Ω—ã—Ö ) –∏ —É–¥–∞—Ä–Ω—ã—Ö (–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö) —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–≤–µ —Ñ–æ—Ä–º—ã –≤–æ–ª–Ω—ã
    #–í—ã–≤–æ–¥ –±–∏—Ç–æ–≤ –≤ –≤–∏–¥–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    y_harmonic, y_percussive = librosa.effects.hpss(sample_rate)
    tempo, beat_frames = librosa.beat.beat_track(y=y_percussive, sr=sr)
    beat_times = librosa.frames_to_time(beat_frames, sr=sr)
    beat_time_diff = np.ediff1d(beat_times)
    beat_nums = np.arange(1, np.size(beat_times))
    fig, ax = plt.subplots()
    fig.set_size_inches(15, 5)
    ax.set_ylabel("Time difference (s)")
    ax.set_xlabel("Beats")
    g = sns.barplot(x=beat_nums, y=beat_time_diff, palette="BuGn_d", ax=ax)
    g = g.set(xticklabels=[])
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–î–∏–∞–≥—Ä–∞–º–º–∞ –±–∏—Ç–æ–≤")
    os.remove("Visualization_audio.png")

    #–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
    fig, ax = plt.subplots()
    librosa.display.waveshow(sample_rate, sr=sr)
    ax.set(title='Visualization audio')
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ")
    os.remove("Visualization_audio.png")

    #–ú–µ–ª-–∫–µ–ø—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã(MFCC)
    #-–º–∞—Ç—Ä–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–º–±—Ä–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    #–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
    mfcc = librosa.feature.mfcc(y=sample_rate, sr=sr, hop_length=8192, n_mfcc=12)
    mfcc_delta = librosa.feature.delta(mfcc)
    sns.heatmap(mfcc_delta)
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")
    os.remove("Visualization_audio.png")
    #–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –≤ —Ö—Ä–æ–º–∞—Ç–æ–≥—Ä–∞–º–º—É
    chromagram = librosa.feature.chroma_cqt(y=sample_rate, sr=sr)
    sns.heatmap(chromagram)
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'),
                   caption=f"–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –≤ —Ö—Ä–æ–º–∞—Ç–æ–≥—Ä–∞–º–º—É")
    os.remove("Visualization_audio.png")

    #Rainbowgrams
    D = librosa.stft(sample_rate)
    mag, phase = librosa.magphase(D)
    freqs = librosa.fft_frequencies()
    times = librosa.times_like(D)

    phase_exp = 2*np.pi*np.multiply.outer(freqs,times)
    fig, ax = plt.subplots()
    img = librosa.display.specshow(np.diff(np.unwrap(np.angle(phase)-phase_exp, axis=1), axis=1, prepend=0),
                         cmap='hsv',
                         alpha=librosa.amplitude_to_db(mag, ref=np.max)/80 + 1,
                         ax=ax,
                         y_axis='log',
                         x_axis='time')
    ax.set_facecolor('#000')
    cbar = fig.colorbar(img, ticks=[-np.pi, -np.pi/2, 0, np.pi/2, np.pi])
    cbar.ax.set(yticklabels=['-œÄ', '-œÄ/2', "0", 'œÄ/2', 'œÄ']);
    ax.set(title='Rainbowgram')
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–†–∞–¥—É–∂–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
    os.remove("Visualization_audio.png")

    #–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥
    spectral_centroids = librosa.feature.spectral_centroid(y=sample_rate, sr=sr)[0]
    spectral_centroids.shape
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    plt.figure(figsize=(12, 4))
    frames = range(len(spectral_centroids))
    t = librosa.frames_to_time(frames)
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    def normalize(sample_rate, axis=0):
        return preprocessing.minmax_scale(sample_rate, axis=axis)
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–∞ –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ä–º–æ–π –≤–æ–ª–Ω—ã
    librosa.display.waveshow(sample_rate, sr=sr, alpha=0.4)
    plt.plot(t, normalize(spectral_centroids), color='b')
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥")
    os.remove("Visualization_audio.png")

    #–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    spectral_bandwidth_2 = librosa.feature.spectral_bandwidth(y=sample_rate+0.01, sr=sr)[0]
    spectral_bandwidth_3 = librosa.feature.spectral_bandwidth(y=sample_rate+0.01, sr=sr, p=3)[0]
    spectral_bandwidth_4 = librosa.feature.spectral_bandwidth(y=sample_rate+0.01, sr=sr, p=4)[0]
    plt.figure(figsize=(15, 9))
    librosa.display.waveshow(sample_rate, sr=sr, alpha=0.4)
    plt.plot(t, normalize(spectral_bandwidth_2), color='r')
    plt.plot(t, normalize(spectral_bandwidth_3), color='g')
    plt.plot(t, normalize(spectral_bandwidth_4), color='y')
    plt.legend(('p = 2', 'p = 3', 'p = 4'))
    plt.savefig('Visualization_audio.png')
    bot.send_photo(message.chat.id, open("Visualization_audio.png", 'rb'), caption=f"–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞")
    os.remove("Visualization_audio.png")
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")

def first_step_load(message):
    global old_video
    chat_id = message.chat.id
    try:
        file_details = message.video
        bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...')
        file_id = file_details.file_id
        file_info = bot.get_file(file_id)
        downloaded_video = bot.download_file(file_info.file_path)
        old_video = message.video.file_id + ".mp4"
        with open(old_video, 'wb') as saved_file:
            saved_file.write(downloaded_video)

        msg = bot.reply_to(message, '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª, '
                                    '–∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "*.mp3"')
        bot.register_next_step_handler(msg, second_step_load)
    except:
        bot.send_message(chat_id, '–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
        return

def second_step_load(message):
    global old_audio

    chat_id = message.chat.id
    file_details = message.audio
    bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∫–∞ audio...')
    file_id = file_details.file_id
    file_info = bot.get_file(file_id)
    downloaded_audio = bot.download_file(file_info.file_path)
    old_audio = message.audio.file_id + ".mp3"
    with open(old_audio, 'wb') as saved_file:
        saved_file.write(downloaded_audio)

    msg = bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: "3 20", '
                                '–±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å,—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞—É–¥–∏–æ-—á–∞—Å—Ç—å —Å 3 –ø–æ 20 —Å–µ–∫—É–Ω–¥—É –≤ –≤–∏–¥–µ–æ')
    bot.register_next_step_handler(msg, third_step_load)

def third_step_load(message):
    global new_video
    chat_id = message.chat.id
    numbers_str = message.text.lower()
    both_numbers = numbers_str.split(' ', 1)

    try:
        if not(both_numbers[0].isdigit()) or not(both_numbers[1].isdigit()):
            raise ValueError('–ß–∏—Å–ª–∞ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–∏–π–¥—ë—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞üòî'
                             '\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ')
    except Exception as error:
        bot.send_message(chat_id, str(error))
        os.remove(old_audio)
        os.remove(old_video)
        return

    start_value = int(both_numbers[0])
    end_value = int(both_numbers[1])

    new_video = "RESULT.mp4"

    bot.send_message(chat_id, "–°–æ–µ–¥–∏–Ω—è—é... ")
    replace_audio_in_video(old_video, old_audio, new_video, start_value, end_value)

    result = open(new_video, 'rb')
    bot.send_video(chat_id, result)
    result.close()
    os.remove(old_audio)
    os.remove(new_video)
    os.remove(old_video)

def replace_audio_in_video(source_video_name, source_audio_name, new_video, start_value, end_value):
    global old_audio
    global old_video

    start_time, end_time = start_value, end_value
    mp4file, mp3file, result = source_video_name, source_audio_name, new_video
    video_clip = VideoFileClip(mp4file)
    audio_clip = AudioFileClip(mp3file)

    print(Fore.CYAN + '[+] –ù–∞—á–∏–Ω–∞—é –≤—ã—Ä–µ–∑–∫—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ')
    print(Fore.YELLOW + f'   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {end_time - start_time} —Å–µ–∫—É–Ω–¥')
    print(Fore.YELLOW + f'   - –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {video_clip.duration} —Å–µ–∫—É–Ω–¥\n')

    clip_clip = video_clip.subclip(start_time, end_time)
    clip_before = video_clip.subclip(0, start_time)
    clip_after = video_clip.subclip(end_time, )
    clip_clip.audio = audio_clip
    clip_to_merge = [clip_before, clip_clip, clip_after]
    merge_final = concatenate_videoclips(clip_to_merge)
    merge_final.write_videofile(result)

    audio_clip.close()
    video_clip.close()

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)